#                 Sun Public License Notice
# 
# The contents of this file are subject to the Sun Public License
# Version 1.0 (the "License"). You may not use this file except in
# compliance with the License. A copy of the License is available at
# http://www.sun.com/
# 
# The Original Code is NetBeans. The Initial Developer of the Original
# Code is Sun Microsystems, Inc. Portions Copyright 1997-2001 Sun
# Microsystems, Inc. All Rights Reserved.

CTL_NAME=VisiBroker for Java 3.4

IMPORT=\
import org.omg.CORBA.*;\n\
import java.io.*;\n\
import java.util.*;\n

IMPORT_NS=\
import org.omg.CORBA.*;\n\
import java.io.*;\n\
import java.util.*;\n\
import org.omg.CosNaming.*;\n\
import org.omg.CosNaming.NamingContextPackage.*;\n

SETTINGS_ORB_PROPERTIES=\
    // setting system properties is necessary for use with VISIBROKER for Java in Java 1.2\n    Properties props = System.getProperties ();\n    props.put ("org.omg.CORBA.ORBClass", "com.visigenic.vbroker.orb.ORB");\n    props.put ("org.omg.CORBA.ORBSingletonClass", "com.visigenic.vbroker.orb.ORB");\n    System.setProperties (props);\n

ORB_SERVER_INIT=\
    // create ORB and BOA\n    ORB orb = ORB.init (args, null);\n    BOA boa = ((com.visigenic.vbroker.orb.ORB)orb).BOA_init ();\n\n    //\n    // add code to create your object implementation here\n

ORB_CLIENT_INIT=\
    // create ORB\n    ORB orb = ORB.init (args, null);\n

ORB_OBJECT_ACTIVATION=boa.obj_is_ready (/* add your object implementation here */);
ORB_SERVER_RUN=boa.impl_is_ready ();

SERVER_NS=//this server will use Naming Service\n    org.omg.CORBA.Object o1 = null;\n    try {\n      o1 = orb.resolve_initial_references("NameService");\n    } catch (org.omg.CORBA.ORBPackage.InvalidName ex) {\n        System.out.println ("Can't binding to NameService");\n        System.exit (1);\n    }\n    NamingContext nc = NamingContextHelper.narrow(o1);\n\n    if (nc == null) {\n      System.out.println ("Naming Context is null!!!");\n      System.exit (1);\n    }\n\n    try {\n      //\n      // Create and bind Naming Contexts\n      //\n      // paste code retrieved using the Copy Server Code action (on a context node in the Naming Service Browser) here \n      boolean already_bound = false;\n      NameComponent[] nc1Name = new NameComponent[1];\n      NamingContext nc1 = null;\n      for (int i=0; i<hierarchy_of_contexts.length / 2; i++) {\n	 nc1Name[0] = new NameComponent();\n	 nc1Name[0].id = hierarchy_of_contexts[i*2];\n	 nc1Name[0].kind = hierarchy_of_contexts[i*2+1];\n	 try {\n	    nc1 = nc.bind_new_context (nc1Name);\n	    nc = nc1;\n	 } catch (org.omg.CosNaming.NamingContextPackage.AlreadyBound e) {\n	    already_bound = true;\n	 }\n	 if (already_bound) {\n	    try {\n	       org.omg.CORBA.Object o = nc.resolve (nc1Name);\n	       nc1 = NamingContextHelper.narrow (o);\n	       if (nc1 != null)\n		  nc = nc1;\n	       already_bound = false;\n	    } catch (Exception e) {\n	       e.printStackTrace ();\n	    }\n	 }\n      }\n      \n      //\n      // Bind names with the Naming Service\n      //\n      NameComponent[] aName = new NameComponent[1];\n      aName[0] = new NameComponent ();\n      aName[0].id = name_of_server[0];\n      aName[0].kind = name_of_server[1];\n      nc.bind(aName, /* place here name of servant variable */);\n    } catch (Exception e) {\n        e.printStackTrace ();\n    }\n
SERVER_IOR_TO_FILE=// IOR will be written to file <file_name>\n    String ior = orb.object_to_string (/* add your object implementation here */);\n    try {\n      FileWriter file = new java.io.FileWriter("<file_name>");\n      PrintWriter pfile=new java.io.PrintWriter(file);\n      pfile.println (ior);\n      pfile.flush();\n      pfile.close();\n     } catch (IOException ex) {\n      System.out.println("file error");\n    }\n
SERVER_IOR_TO_OUTPUT=//IOR will be written to standard output\n    System.out.println (orb.object_to_string (/* place here your object implementation */));\n
SERVER_BINDER=// server will use VisiBroker proprietary binder\n    // you must instantiate your implemenattion like this:\n    // HelloWorld hello = new HelloWorldImpl ("HelloWorld");\n    // in brackets is name which is after starting visible from implementation repository\n

CLIENT_NS=//client will use Naming Service\n    org.omg.CORBA.Object o1 = null;\n    try {\n      o1 = orb.resolve_initial_references("NameService");\n    } catch (org.omg.CORBA.ORBPackage.InvalidName ex) {\n      System.err.println("Can't bind to Naming Service");\n      System.exit(0);\n    }\n    if (o1 == null) {\n      System.err.println("Naming Service is a nil object reference");\n      System.exit(0);\n    }\n    NamingContext nc = NamingContextHelper.narrow (o1);\n    if (nc == null) {\n      System.err.println("Naming Service is not a NamingContext object reference");\n      System.exit(0);\n    }\n    org.omg.CORBA.Object obj = null;\n    try {\n      //\n      // Resolve names with the Naming Service\n      //\n      // paste code retrieved using the Copy Client Code action (on an object node in the Naming Service Browser) here \n      NameComponent[] aName = new NameComponent[client_name_hierarchy.length / 2];\n      for (int i=0; i<(client_name_hierarchy.length / 2); i++) {\n	 aName[i] = new NameComponent();\n	 aName[i].id = client_name_hierarchy[i*2];\n	 aName[i].kind = client_name_hierarchy[i*2+1];\n	 }\n      obj = nc.resolve (aName);\n   } catch (Exception e) {\n       e.printStackTrace ();\n   }\n   // place narrowing of your object here\n   // something like:  <class> <name> = <class>Helper.narrow (obj);\n   //                  if (<name> == null) throw new RuntimeException ();\n\n
CLIENT_IOR_FROM_FILE=//IOR will be read from file <file_name>\n    org.omg.CORBA.Object obj = null;\n    try {\n      FileReader file = new java.io.FileReader("<file_name>");\n      BufferedReader input = new java.io.BufferedReader(file);\n      String target = input.readLine();\n      input.close();\n      obj = orb.string_to_object(target);\n    } catch (IOException ex) {\n      System.out.println("file error");\n      System.exit(0);\n    }\n    // add your code narrowing here\n    // something like:  <class> <name> = <class>Helper.narrow (obj);\n    //                  if (<name> == null) throw new RuntimeException ();\n
CLIENT_IOR_FROM_INPUT=//IOR will be read from standard input\n    String ior = null;\n    try {\n      InputStreamReader dataIn = new InputStreamReader(System.in);\n      BufferedReader in = new BufferedReader(dataIn);\n      ior = in.readLine();\n    } catch (IOException e) {\n      System.out.println (e);\n    }\n    org.omg.CORBA.Object obj = orb.string_to_object (ior);\n    if (obj == null)\n       throw new RuntimeException ();\n    // add your code here\n    // something like:  <class> <name> = <class>Helper.narrow (obj);\n    //                  if (<name> == null) throw new RuntimeException ();\n
CLIENT_BINDER=// client will use VisiBroker proprietary binder\n    // you must bind to your object implementation\n    // using code which looks like this:\n    // HelloWorld hello = HelloWorldHelper.bind (orb, "HelloWorld");\n    // then you can invoke the method:  hello.say ()  etc.\n


# VisiBroker generate tie based skeletons automatically
TIE_PARAM=

DIR_PARAM=-root_dir 
PACKAGE_PARAM=-package 
COMPILER=idl2java {params} {dir_param} {package_root} {package_param} {package} {files}
PACKAGE_DELIMITER=.
ERROR_EXPRESSION=^"([^ ]+)":([0-9]+): (.*)
FILE_POSITION=1
LINE_POSITION=2
COLUMN_POSITION=-1
MESSAGE_POSITION=3


# added for implementation generator

#ImplBase aproach

IMPLBASE_IMPL_PREFIX=
IMPLBASE_IMPL_POSTFIX=Impl
EXT_CLASS_PREFIX=_
EXT_CLASS_POSTFIX=ImplBase

#TIE aproach
TIE_IMPL_PREFIX=
TIE_IMPL_POSTFIX=ImplTIE
IMPL_INT_PREFIX=
IMPL_INT_POSTFIX=Operations




